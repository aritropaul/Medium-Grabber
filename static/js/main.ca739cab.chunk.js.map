{"version":3,"sources":["Components/Articles.js","App.js","serviceWorker.js","index.js"],"names":["Description","content","undefined","desc","DOMParser","parseFromString","getElementsByTagName","textContent","console","log","className","Image","imgSrc","src","alt","width","height","Articles","articles","map","article","href","link","key","Math","random","title","App","state","fetch","then","res","text","data","json","parser","parse","setState","split","catch","err","error","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TAKMA,G,sBAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACnB,QAAgBC,IAAZD,EAAsB,CACtB,IAEIE,GAFS,IAAIC,WACDC,gBAAgBJ,EAAS,aAC3BK,qBAAqB,KAAK,GAAGC,YAE3C,OADAC,QAAQC,IAAIN,GACJ,yBAAKO,UAAU,WAAWP,GAGlC,OAAQ,gCAIVQ,EAAQ,SAAC,GAAiB,IAAfV,EAAc,EAAdA,QACb,QAAgBC,IAAZD,EAAsB,CACtB,IAEIW,GAFS,IAAIR,WACDC,gBAAgBJ,EAAS,aACzBK,qBAAqB,OAAO,GAAGO,IAE/C,OADAL,QAAQC,IAAIG,GACJ,yBAAKF,UAAU,UAAUG,IAAKD,EAAQE,IAAI,GAAGC,MAAM,MAAMC,OAAO,QAGxE,OAAQ,+BAqBDC,EAjBE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEhB,OACI,yBAAKR,UAAU,OACVQ,EAASC,KAAI,SAACC,GAAD,OACV,uBAAGC,KAAQD,EAAQE,MACf,yBAAKZ,UAAU,mBAAmBa,IAAKC,KAAKC,UACxC,kBAAC,EAAD,CAAOxB,QAASmB,EAAQ,qBACxB,wBAAIV,UAAU,SAASU,EAAQM,OAC/B,kBAAC,EAAD,CAAazB,QAASmB,EAAQ,4BCEvCO,E,2MAjCbC,MAAQ,CACNF,MAAQ,GACRvB,KAAO,GACPe,SAAW,I,mFAGQ,IAAD,OAClBW,MAAM,uEACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,IAAIC,EAAOC,IAAOC,MAAMH,GACxBzB,QAAQC,IAAIyB,EAAI,IAAJ,cACZ,EAAKG,SAAS,CAACX,MAAOQ,EAAI,IAAJ,cAAgCI,MAAM,OAAO,KACnE,EAAKD,SAAS,CAAClC,KAAM+B,EAAI,IAAJ,oBAAsCI,MAAM,OAAO,KACxE,EAAKD,SAAS,CAACnB,SAAUgB,EAAI,IAAJ,kBAE1BK,OAAM,SAAAC,GACLhC,QAAQiC,MAAMD,Q,+BAKhB,OACE,yBAAK9B,UAAU,iBACb,4BAAKgC,KAAKd,MAAMF,OAChB,2BAAIgB,KAAKd,MAAMzB,MACf,kBAAC,EAAD,CAAUe,SAAUwB,KAAKd,MAAMV,gB,GA5BrByB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,iB","file":"static/js/main.ca739cab.chunk.js","sourcesContent":["import React from 'react'\nimport './Articles.css';\nimport '../normalize.css';\nimport '../skeleton.css';\n\nconst Description = ({ content }) => {\n    if (content !== undefined){\n        var parser = new DOMParser();\n        let el = parser.parseFromString(content, 'text/html');\n        var desc = el.getElementsByTagName('p')[0].textContent;\n        console.log(desc)\n        return (<div className=\"content\">{desc}</div>)\n    }\n    else {\n        return (<div></div>)\n    }\n}\n\nconst Image = ({ content }) => {\n    if (content !== undefined){\n        var parser = new DOMParser();\n        let el = parser.parseFromString(content, 'text/html');\n        var imgSrc = el.getElementsByTagName('img')[0].src;\n        console.log(imgSrc)\n        return (<img className=\"preview\" src={imgSrc} alt=\"\" width=\"80%\" height=\"50%\"></img>)\n    }\n    else {\n        return (<div></div>)\n    }\n}\n\nconst Articles = ({ articles }) => {\n    \n    return(\n        <div className=\"row\">\n            {articles.map((article) => (\n                <a href = {article.link}>\n                    <div className=\"card six columns\" key={Math.random()}>\n                        <Image content={article[\"content:encoded\"]}></Image>\n                        <h1 className=\"title\">{article.title}</h1>\n                        <Description content={article[\"content:encoded\"]}></Description>\n                    </div>\n                </a>\n            ))}\n        </div>\n    )\n}\n\nexport default Articles","import React, { Component } from 'react';\nimport parser from 'fast-xml-parser'\nimport './App.css';\nimport Articles from './Components/Articles';\nimport './normalize.css';\nimport './skeleton.css';\n\nclass App extends Component {\n\n  state = {\n    title : '',\n    desc : '',\n    articles : []\n  }\n\n  componentDidMount() {\n    fetch(\"https://cors-anywhere.herokuapp.com/https://medium.com/feed/gdg-vit\")\n    .then(res => res.text())\n    .then((data) => {\n      var json = parser.parse(data)\n      console.log(json[\"rss\"][\"channel\"][\"item\"])\n      this.setState({title: json[\"rss\"][\"channel\"][\"title\"].split(\" - \")[0]})\n      this.setState({desc: json[\"rss\"][\"channel\"][\"description\"].split(\" - \")[0]})\n      this.setState({articles: json[\"rss\"][\"channel\"][\"item\"]})\n    })\n    .catch(err => {\n      console.error(err)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <h1>{this.state.title}</h1>\n        <p>{this.state.desc}</p>\n        <Articles articles={this.state.articles}></Articles>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}